# A template that creates Lambdas and database to support an integration between AWS Step Functions and AWS Batch
#
# Copyright 2017 Melon Software Ltd (UK), all rights reserved
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates resources to support integration between AWS Step Functions and AWS Batch"

Parameters:

    Project:
        Type: "String"
        Description: "The name of the Project"

    S3Bucket:
        Type: "String"
        Description: "The name of the S3 bucket where Lambda functions are stored"


Resources:

    ##########################################################################################################
    ##  IAM
    ##########################################################################################################

    LambdaExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            Policies:
              - PolicyName: "logs"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                        Effect: "Allow"
                        Resource: "*"
              - PolicyName: "execution"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "states:GetActivityTask"
                          - "batch:DescribeJobDefinitions"
                          - "batch:DescribeJobQueues"
                          - "batch:SubmitJob"
                        Effect: "Allow"
                        Resource: "*"
            RoleName: { "Fn::Sub": "${Project}-sfn-batch-${AWS::Region}" }

    ##########################################################################################################
    ##  LAMBDA
    ##########################################################################################################

    LambdaSchedule:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: { Ref: "S3Bucket" }
                S3Key: "lambdas/sfn_batch.zip"
            Handler: "sfn_batch.handler_schedule"
            Runtime: "python3.6"
            Timeout: "300"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "${Project}-sfn-batch-schedule" }

    LambdaRespond:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: { Ref: "S3Bucket" }
                S3Key: "lambdas/sfn_batch.zip"
            Handler: "sfn_batch.handler_respond"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "${Project}-sfn-batch-respond" }

Outputs:

    LambdaSchedule:
        Description: "ARN of schedule lambda"
        Value: { "Fn::GetAtt": [ "LambdaSchedule", "Arn" ] }
        Export:
            Name: "SfnBatchLambdaSchedule"

    LambdaRespond:
        Description: "ARN of respond lambda"
        Value: { "Fn::GetAtt": [ "LambdaRespond", "Arn" ] }
        Export:
            Name: "SfnBatchLambdaRespond"
